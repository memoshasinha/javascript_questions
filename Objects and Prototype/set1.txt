1. Get Object property details for cat object
class Cat{
  constructor(name,color){
    this.name = name;
    this.color = color;
  }
}
var cat = new Cat('Memosha','Gabdu');
Object.getOwnPropertyDescriptor(cat,'name')

Output
Object {
value: Memosha
writable: true
enumerable: true
configurable: true
}


2. Make property writable as false
Object.defineProperty(cat,'name',{writable:false});

3. What error will you get if you try to assign value to an object's readonly property?
 Cannot assign to read only property 'name' of object 

4. Assume the below object
var cat = {
    name :
    {
        first: 'Fluffy',
        last: 'dksjfhg'
    },
    color{
        'White'
    }
};
Object.defineProperty(cat,'name',{writable:false});
cat.name.first = 'Scratchy';
console.log(cat.name);
What will be Output?
Object{
    first: Scratchy,
    last: dksjfhg
}

5. If we still want to freeze the object what we can do?
Object.freeze(cat.name);
cat.name.first = 'Scratchy';
console.log(cat.name);
What will be Output?
 Cannot assign to read only property 'name' of object 

6. How to make property not enumerable?
Object.defineProperty(cat,'name',{enumerable:false});

If its enumerable true , then
Object.keys(cat);

Output
Array{
    0: name,
    1: color
}
enumerable false allows JSON.stringify also to remove property from serialization
enumerable false will not stop you to see property using [] notation
cat['name'] will give 
Object{
    first: Scratchy,
    last: dksjfhg
}

7. Prevent object's property attribute to be changed.
Output of below code snippet

var cat = {
    name :{
        first: Scratchy,
        last: dksjfhg
    },
    color: 'White'
};
Object.defineProperty(cat,'name',{configurable:false});
Object.defineProperty(cat,'name',{enumerable:false}); //Cannot redefine property
delete cat.name //Cannot delete property 'name' of #<Object>

8. Getters and Setters

Object.defineProperty(cat,'fullName',{
    get: function(){
        return this.first+ ' ' + this.last;
    },
    set: function(value){
        var nameParts = value.split(' ');
        this.name.first = nameParts[0];
        this.name.last = nameParts[1];
    }
});

9. Assign new property to an Array.
var arr = ['red','blue','green'];

Object.defineProperty(Array.prototype,
'last',
{
    get: function(){
        return this[this.length -1 ];
    }
});

var last = arr.last;
var arr2 = ['edew','fvddsf'];


10. prototype for function
var function1 = function(){}

console.log(function1.prototype);//gives empty object {}

var cat = { name: 'Fluffy' };
console.log(cat._proto_);// Object{}

11. What is function prototype?
A function prototype is the object instance that will become the prototype for all 
objects created using this function as a constructor.


12. What is Object's prototype??
An object's prototype is the object instance from which the object is inherited.


13. Output of below code: - 
function Cat(name, color){
    this.name = name;
    this.color= color;
}

var fluffy = new Cat('Fluffy','White');
console.log(Cat.prototype);//Cat{}
console.log(fluffy._proto_);//Cat{}

console.log(Cat.prototype === fluffy._proto_);//true


14. Output of below code: - 
function Cat(name, color){
    this.name = name;
    this.color= color;
}
Cat.prototype.age = 4;
var fluffy = new Cat('Fluffy','White');
var muffin = new Cat('Muffin','Brown');
fluffy.age = 5;

console.log(fluffy.age);//5
console.log(fluffy._proto_.age);4

15. What will happen if we remove fluffy.age = 5; in above example??

console.log(fluffy.age);//4
console.log(fluffy._proto_.age);4
console.log(Object.keys(fluffy));//Array{0:name, 1:color}

What happened to age?
get value from object if not then it will get prototype.

16. If we had to create new prototype
Cat.prototype = { age: 10};


17. prototype creation in inheritence
function Animal(){}

Animal.prototype.speak = function(){
    console.log('Grunt');
}

function Cat(name, color){
    this.name = name;
    this.color= color;
}
Cat.prototype = Object.create(Animal.prototype);

var fluffy = new Cat('Fluffy','White');

fluffy.speak();

18. 
function Animal(voice){
    this.voice = voice;
}

Animal.prototype.speak = function(){
    console.log(this.voice);
}

function Cat(name, color){
    Animal.call(this,'Meowww');
    this.name = name;
    this.color= color;
}
Cat.prototype = Object.create(Animal.prototype);

var fluffy = new Cat('Fluffy','White');

fluffy.speak();


Cat.prototype.constructor = Cat;
console.log(fluffy._proto_);//Gives Cat{voice: Meowww, etc}
console.log(fluffy._proto_._proto_);//Gives Animal {
    speak , etc
}




